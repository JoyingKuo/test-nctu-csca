'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _isotrope = require('isotrope');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var babelPluginFlowReactPropTypes_proptype_Axis = require('isotrope').babelPluginFlowReactPropTypes_proptype_Axis || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_Side = require('isotrope').babelPluginFlowReactPropTypes_proptype_Side || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_Direction = require('isotrope').babelPluginFlowReactPropTypes_proptype_Direction || require('prop-types').any;

var ownProps = {
  shaftWidth: true,
  shaftLength: true,
  headWidth: true,
  headLength: true,
  direction: true,
  unclosed: true,
  transform: true
};

var pathProps = {
  alignmentBaseline: true,
  baselineShift: true,
  clip: true,
  clipPath: true,
  clipRule: true,
  color: true,
  cursor: true,
  direction: true,
  display: true,
  dominantBaseline: true,
  enableBackground: true,
  fill: true,
  fillOpacity: true,
  filter: true,
  floodColor: true,
  floodOpacity: true,
  mask: true,
  opacity: true,
  overflow: true,
  pointerEvents: true,
  shapeRendering: true,
  stopColor: true,
  stopOpacity: true,
  stroke: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeLinecap: true,
  strokeLinejoin: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true,
  visibility: true
};

var pointFns = {
  left: function left(x, y) {
    return -x + ',' + y;
  },
  right: function right(x, y) {
    return x + ',' + y;
  },
  up: function up(x, y) {
    return y + ',' + -x;
  },
  down: function down(x, y) {
    return y + ',' + x;
  }
};

var nextId = 0;

var Arrow = function (_React$Component) {
  (0, _inherits3.default)(Arrow, _React$Component);

  function Arrow() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Arrow);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Arrow.__proto__ || (0, _getPrototypeOf2.default)(Arrow)).call.apply(_ref, [this].concat(args))), _this), _this._id = nextId++, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(Arrow, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var shaftWidth = props.shaftWidth,
          shaftLength = props.shaftLength,
          headWidth = props.headWidth,
          headLength = props.headLength,
          unclosed = props.unclosed,
          direction = props.direction,
          transform = props.transform;


      var side = _isotrope.sideInDirection[direction];
      var sideSignum = _isotrope.signumOf[side];
      var axis = _isotrope.axisFor[side];
      var oaxis = _isotrope.oppositeAxis[axis];

      var bounds = {};

      bounds[side] = headLength * sideSignum;
      bounds[_isotrope.oppositeSide[side]] = -shaftLength * sideSignum;
      bounds[_isotrope.loSide[oaxis]] = -headWidth / 2;
      bounds[_isotrope.hiSide[oaxis]] = headWidth / 2;

      var point = pointFns[direction];

      var pathd = 'M' + point(-shaftLength, -shaftWidth / 2) + '\nL' + point(0, -shaftWidth / 2) + '\nL' + point(0, -headWidth / 2) + '\nL' + point(headLength, 0) + '\nL' + point(0, headWidth / 2) + '\nL' + point(0, shaftWidth / 2) + '\nL' + point(-shaftLength, shaftWidth / 2) + (unclosed ? '' : ' z');

      var width = bounds.right - bounds.left;
      var height = bounds.bottom - bounds.top;

      var propsForPath = { d: pathd };
      var propsForSvg = {
        viewBox: bounds.left + ' ' + bounds.top + ' ' + width + ' ' + height,
        preserveAspectRatio: "xMidYMid meet"
      };

      for (var _key2 in props) {
        if (pathProps[_key2]) propsForPath[_key2] = props[_key2];else if (!ownProps[_key2]) propsForSvg[_key2] = props[_key2];
      }
      var clipPathId = 'react-arrow-stroke-clip-' + this._id;
      if (propsForPath.stroke && !propsForPath.clipPath) {
        // double the stroke width and clip it to simulate stroke-alignment="inside"
        if (propsForPath.strokeWidth != null) propsForPath.strokeWidth *= 2;else propsForPath.strokeWidth = 2;
        propsForPath.clipPath = 'url(#' + clipPathId + ')';
      }
      var style = propsForSvg.style = propsForSvg.style ? (0, _extends3.default)({}, propsForSvg.style) : {};
      if (style.width == null) style.width = width;
      if (style.height == null) style.height = height;

      return React.createElement(
        'svg',
        propsForSvg,
        propsForPath.stroke && React.createElement(
          'defs',
          { transform: transform },
          React.createElement(
            'clipPath',
            { id: clipPathId },
            React.createElement('path', { d: pathd })
          )
        ),
        transform ? React.createElement(
          'g',
          { transform: transform },
          React.createElement('path', propsForPath)
        ) : React.createElement('path', propsForPath)
      );
    }
  }]);
  return Arrow;
}(React.Component);

Arrow.propTypes = {
  shaftWidth: require('prop-types').number.isRequired,
  shaftLength: require('prop-types').number.isRequired,
  headWidth: require('prop-types').number.isRequired,
  headLength: require('prop-types').number.isRequired,
  direction: require('prop-types').oneOf(['left', 'right', 'up', 'down']).isRequired,
  unclosed: require('prop-types').bool,
  transform: require('prop-types').string
};
exports.default = Arrow;