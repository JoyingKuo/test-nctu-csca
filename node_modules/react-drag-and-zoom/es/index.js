var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp2;

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import { number, func, oneOf, shape, string } from 'prop-types';
import Draggable from 'react-draggable';

var isNegative = function isNegative(n) {
  return ((n = +n) || 1 / n) < 0;
};

var updatePercentageBasedOnScroll = function updatePercentageBasedOnScroll(_ref) {
  var percentage = _ref.percentage,
      min = _ref.min,
      max = _ref.max,
      step = _ref.step,
      delta = _ref.delta;

  var signedStep = isNegative(delta) ? step : step * -1;
  var newPercentage = percentage + signedStep;
  if (newPercentage > max) return max;
  if (newPercentage < min) return min;
  return newPercentage;
};

var DragAndZoom = (_temp2 = _class = function (_PureComponent) {
  _inherits(DragAndZoom, _PureComponent);

  function DragAndZoom() {
    var _temp, _this, _ret;

    _classCallCheck(this, DragAndZoom);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = {
      zoom: _this.props.initialZoom || 100,
      originX: 50,
      originY: 50
    }, _this.handleMouseWheel = function (e) {
      e.preventDefault();

      var _this$props = _this.props,
          minZoom = _this$props.minZoom,
          maxZoom = _this$props.maxZoom,
          zoomStep = _this$props.zoomStep,
          onZoom = _this$props.onZoom;


      var zoom = updatePercentageBasedOnScroll({
        percentage: _this.state.zoom,
        min: minZoom,
        max: maxZoom,
        step: zoomStep,
        delta: e.deltaY
      });

      _this.setState({
        zoom: zoom,
        originY: _this.originCoordinates.y,
        originX: _this.originCoordinates.x,
        isScrolling: true
      });

      onZoom(zoom, e);
    }, _this.handleMouseMove = function (e) {
      _this.setState({ isScrolling: false });

      var pageX = e.pageX,
          pageY = e.pageY;

      var relativeX = pageX - _this.target.getBoundingClientRect().left;
      var relativeY = pageY - _this.target.getBoundingClientRect().top;
      var percentageX = relativeX * 100 / _this.target.getBoundingClientRect().width;
      var percentageY = relativeY * 100 / _this.target.getBoundingClientRect().height;
      _this.originCoordinates = {
        x: percentageX,
        y: percentageY
      };
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  DragAndZoom.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        children = _props.children,
        initialZoom = _props.initialZoom,
        minZoom = _props.minZoom,
        maxZoom = _props.maxZoom,
        zoomStep = _props.zoomStep,
        onZoom = _props.onZoom,
        onMouseDown = _props.onMouseDown,
        onDragStart = _props.onDragStart,
        onDrag = _props.onDrag,
        onDragStop = _props.onDragStop,
        bounds = _props.bounds,
        other = _objectWithoutProperties(_props, ['children', 'initialZoom', 'minZoom', 'maxZoom', 'zoomStep', 'onZoom', 'onMouseDown', 'onDragStart', 'onDrag', 'onDragStop', 'bounds']);

    return React.createElement(
      'div',
      other,
      React.createElement(
        Draggable,
        {
          onMouseDown: onMouseDown,
          onStart: onDragStart,
          onDrag: onDrag,
          onStop: onDragStop,
          bounds: bounds
        },
        React.createElement(
          'div',
          null,
          React.createElement(
            'div',
            {
              onWheel: this.handleMouseWheel,
              onMouseMove: this.handleMouseMove,
              ref: function ref(node) {
                return _this2.target = node;
              },
              style: _extends({}, children.props.style, {
                cursor: this.state.isScrolling ? 'row-resize' : 'move',
                transition: 'transform-origin 1000ms ease-out',
                transform: 'scale(' + this.state.zoom / 100 + ')',
                transformOrigin: this.state.originX + '% ' + this.state.originY + '%'
              })
            },
            this.props.children
          )
        )
      )
    );
  };

  return DragAndZoom;
}(PureComponent), _class.defaultProps = {
  zoomStep: 0.6,
  initialZoom: 100,
  minZoom: 0,
  maxZoom: Number.MAX_SAFE_INTEGER
}, _temp2);
DragAndZoom.propTypes = process.env.NODE_ENV !== "production" ? {
  zoomStep: number,
  initialZoom: number,
  minZoom: number,
  maxZoom: number,
  onZoom: func,
  onMouseDown: func,
  onDragStart: func,
  onDrag: func,
  onDragStop: func,
  bounds: oneOf([shape({ left: number, top: number, right: number, bottom: number }), string, 'parent'])
} : {};


export default DragAndZoom;